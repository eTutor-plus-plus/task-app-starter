package at.jku.dke.etutor.task_app.controllers;

import at.jku.dke.etutor.task_app.dto.ModifyTaskDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.MediaType;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;

/**
 * Controller for managing tasks.
 * <p>
 * Add <code>@RestController</code> to the implementing class.
 *
 * @param <D> The type of the task DTO.
 * @param <T> The type of the additional data in {@link ModifyTaskDto}.
 */
@RequestMapping("/api/task")
@Tag(name = "Task", description = "Manage tasks")
public interface TaskController<D, T> {
    /**
     * Returns the task type specific data.
     *
     * @param id The identifier of the requested task.
     * @return The task details or an error response.
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     */
    @GetMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Task details"),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Get task",
        description = "Returns the task type specific data of the requested task. This is used by the task administration to retrieve the form values for editing the task. Requires the CRUD role.",
        security = @SecurityRequirement(name = "api-key"))
    ResponseEntity<D> get(@Parameter(description = "The task identifier.") @PathVariable long id);

    /**
     * Creates a new task.
     *
     * @param id  The identifier of the task (generated by task administration app).
     * @param dto The task data.
     * @return The task-specific task data or an error response.
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     */
    @PostMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE}, consumes = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Task created", headers = @Header(name = "Location", description = "The location of the created task.")),
        @ApiResponse(responseCode = "400", description = "Invalid task data", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Create task",
        description = "Creates a new task. The new task is stored under the specified identifier (normally generated by task administration). Requires the CRUD role.",
        security = @SecurityRequirement(name = "api-key"))
    ResponseEntity<Serializable> create(@Parameter(description = "The task identifier.") @PathVariable long id, @RequestBody ModifyTaskDto<T> dto);

    /**
     * Updates the task data.
     *
     * @param id  The identifier of the task.
     * @param dto The new task data.
     * @return The task-specific task data or an error response.
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     */
    @PutMapping(value = "/{id}", consumes = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Task updated"),
        @ApiResponse(responseCode = "204", description = "Task created and response body is empty"),
        @ApiResponse(responseCode = "400", description = "Invalid task data", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Updates task",
        description = "Updates an existing task. Requires the CRUD role.",
        security = @SecurityRequirement(name = "api-key"))
    ResponseEntity<Serializable> update(@Parameter(description = "The task identifier.") @PathVariable long id, @RequestBody ModifyTaskDto<T> dto);

    /**
     * Deletes the task.
     *
     * @param id The identifier of the task.
     * @return No content or an error response.
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     */
    @DeleteMapping(value = "/{id}")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "Task deleted"),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Delete task",
        description = "Deletes an existing task. Does not return an error if the specified task does not exist. Requires the CRUD role.",
        security = @SecurityRequirement(name = "api-key"))
    ResponseEntity<Void> delete(@Parameter(description = "The task identifier.") @PathVariable long id);
}
