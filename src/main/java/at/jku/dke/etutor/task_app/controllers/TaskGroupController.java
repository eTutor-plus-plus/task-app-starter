package at.jku.dke.etutor.task_app.controllers;

import at.jku.dke.etutor.task_app.auth.AuthConstants;
import at.jku.dke.etutor.task_app.dto.ModifyTaskGroupDto;
import at.jku.dke.etutor.task_app.dto.TaskGroupModificationResponseDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.MediaType;
import org.springframework.http.ProblemDetail;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.io.Serializable;

/**
 * Controller for managing task groups.
 * <p>
 * Add <code>@RestController</code> to the implementing class.
 *
 * @param <D> The type of the task group DTO.
 * @param <T> The type of the additional data in {@link at.jku.dke.etutor.task_app.dto.ModifyTaskGroupDto}.
 */
@RequestMapping("/api/taskGroup")
@Tag(name = "Task Group", description = "Manage task groups")
public interface TaskGroupController<D, T> {
    /**
     * Returns the task group data.
     *
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     * @param id The identifier of the requested task group.
     * @return The task group details or an error response.
     */
    @GetMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Task group details"),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task group not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Get task group",
        description = "Returns the task group type specific data of the requested task group. This is used by the task administration to retrieve the form values for editing the task group. Requires the CRUD role.",
        security = @SecurityRequirement(name = AuthConstants.API_KEY_REQUIREMENT))
    ResponseEntity<D> get(@Parameter(description = "The task group identifier.") @PathVariable long id);

    /**
     * Creates a new task group.
     *
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     * @param id  The identifier of the task group (generated by task administration app).
     * @param dto The task group data.
     * @return The task-specific task group data or an error response.
     */
    @PostMapping(value = "/{id}", produces = {MediaType.APPLICATION_JSON_VALUE}, consumes = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Task group created", headers = @Header(name = "Location", description = "The location of the created task group.")),
        @ApiResponse(responseCode = "400", description = "Invalid task group data", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Create task group",
        description = "Creates a new task group. The new task group is stored under the specified identifier (normally generated by task administration). Requires the CRUD role.",
        security = @SecurityRequirement(name = AuthConstants.API_KEY_REQUIREMENT))
    ResponseEntity<TaskGroupModificationResponseDto> create(@Parameter(description = "The task group identifier.") @PathVariable long id, @RequestBody ModifyTaskGroupDto<T> dto);

    /**
     * Updates the task group data.
     *
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     * @param id  The identifier of the task group.
     * @param dto The new task group data.
     * @return No content or an error response.
     */
    @PutMapping(value = "/{id}", consumes = {MediaType.APPLICATION_JSON_VALUE})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "Task group updated"),
        @ApiResponse(responseCode = "400", description = "Invalid task group data", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task group not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Updates task group",
        description = "Updates an existing task group. Requires the CRUD role.",
        security = @SecurityRequirement(name = AuthConstants.API_KEY_REQUIREMENT))
    ResponseEntity<TaskGroupModificationResponseDto> update(@Parameter(description = "The task group identifier.") @PathVariable long id, @RequestBody ModifyTaskGroupDto<T> dto);

    /**
     * Deletes the task group.
     *
     * @implSpec Only clients with role {@link at.jku.dke.etutor.task_app.auth.AuthConstants#CRUD} should be allowed to access this endpoint.
     * @param id The identifier of the task group.
     * @return No content or an error response.
     */
    @DeleteMapping(value = "/{id}")
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "Task group deleted"),
        @ApiResponse(responseCode = "401", description = "Invalid credentials", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "403", description = "Operation not allowed", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE)),
        @ApiResponse(responseCode = "404", description = "Task group not found", content = @Content(schema = @Schema(implementation = ProblemDetail.class), mediaType = MediaType.APPLICATION_PROBLEM_JSON_VALUE))
    })
    @Operation(
        summary = "Delete task group",
        description = "Deletes an existing task group. Does not return an error if the specified task group does not exist. Requires the CRUD role.",
        security = @SecurityRequirement(name = AuthConstants.API_KEY_REQUIREMENT))
    ResponseEntity<Void> delete(@Parameter(description = "The task group identifier.") @PathVariable long id);
}
