openapi: 3.0.3
info:
  title: eTutor Task-App API Contract
  description: >-
    This document describes the RESTful API that eTutor Task apps must comply
    with in order for task creation to work with eTutor Task-Administration.
    Task apps may have additional endpoints that can be called by the task administration UI.
    The task administration server will forward the requests from the UI to the task app.

    <p>Authentication is performed using API keys. Different API keys may have
    different roles:</p>

    <ul>
        <li><em>CRUD</em>: Create, read, update, and delete tasks and task groups.</li>
        <li><em>SUBMIT</em>: Submit submissions</li>
        <li><em>READ_SUBMISSION</em>: Read persisted submissions</li>
    </ul>
  version: 1.1.1
tags:
  - name: TaskGroup
    description: Manage task groups
  - name: Task
    description: Manage tasks
  - name: Submission
    description: Manage submissions
  - name: Health
    description: Monitor application health
paths:
  /api/taskGroup/{id}:
    get:
      tags:
        - TaskGroup
      operationId: getTaskGroup
      summary: Get task group
      description: >-
        Returns the task group type specific data of the requested task group.
        This is used by the task administration to retrieve the form values for
        editing the task group. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task group identifier.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task group details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskGroup'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
        '404':
          description: Task group not found
      security:
        - api_key: [ ]
    post:
      tags:
        - TaskGroup
      operationId: createTaskGroup
      summary: Create task group
      description: >-
        Creates a new task group. The new task group is stored under the
        specified identifier. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task group identifier.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task group data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTaskGroup'
        required: true
      responses:
        '201':
          description: Task group created
          headers:
            Location:
              description: The location of the created task group.
              schema:
                example: /api/taskGroup/2
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskGroupModificationResponse'
        '400':
          description: Invalid task group data
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
    put:
      tags:
        - TaskGroup
      operationId: updateTaskGroup
      summary: Modify task group
      description: Updates an existing task group. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task group identifier.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task group data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTaskGroup'
        required: true
      responses:
        '200':
          description: Task group updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskGroupModificationResponse'
        '204':
          description: Task group updated and response body is empty
        '400':
          description: Invalid task group data
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
        '404':
          description: Task group not found
      security:
        - api_key: [ ]
    delete:
      tags:
        - TaskGroup
      operationId: deleteTaskGroup
      summary: Delete task group
      description: >-
        Deletes an existing task group. Does not return an error if the
        specified task group does not exist. Requires the <code>CRUD</code>
        role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task group identifier.
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task group deleted
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
  /api/task/{id}:
    get:
      tags:
        - Task
      operationId: getTask
      summary: Get task
      description: >-
        Returns the task type specific data of the requested task. This is used
        by the task administration to retrieve the form values for editing the
        task. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task identifier.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
        '404':
          description: Task not found
      security:
        - api_key: [ ]
    post:
      tags:
        - Task
      operationId: createTask
      summary: Create task
      description: >-
        Creates a new task. The new task is stored under the specified
        identifier. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task identifier.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTask'
        required: true
      responses:
        '201':
          description: Task created
          headers:
            Location:
              description: The location of the created task.
              schema:
                example: /api/task/2
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskModificationResponse'
        '400':
          description: Invalid task data
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
    put:
      tags:
        - Task
      operationId: updateTask
      summary: Modify task
      description: Updates an existing task. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task identifier.
          schema:
            type: integer
            format: int64
      requestBody:
        description: Task data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyTask'
        required: true
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskModificationResponse'
        '204':
          description: Task updated and response body is empty
        '400':
          description: Invalid task data
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
        '404':
          description: Task not found
      security:
        - api_key: [ ]
    delete:
      tags:
        - Task
      operationId: deleteTask
      summary: Delete task
      description: >-
        Deletes an existing task. Does not return an error if the specified task
        does not exist. Requires the <code>CRUD</code> role.
      parameters:
        - name: id
          in: path
          required: true
          description: The task identifier.
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Task deleted
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
  /api/submission:
    get:
      tags:
        - Submission
      summary: Get submissions
      description: >-
        Returns a paged and filtered list of submissions. Requires the
        <code>READ_SUBMISSION</code> role.
      operationId: getSubmissions
      parameters:
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: >-
            Sorting criteria in the format: property,(asc|desc). Default sort
            order is ascending. Multiple sort criteria are supported.
          required: false
          schema:
            type: array
            items:
              type: string
        - name: userFilter
          in: query
          description: User filter string (applies equals to userId).
          required: false
          schema:
            type: string
            example: k1234567
            default: null
        - name: taskFilter
          in: query
          description: Task filter string (applies equals to taskId).
          required: false
          schema:
            type: integer
            format: int64
            example: 109
            default: null
        - name: assignmentFilter
          in: query
          description: Assignment filter string (applies equals to assignmentId).
          required: false
          schema:
            type: string
            example: moodle_quiz_10
            default: null
        - name: modeFilter
          in: query
          description: Submission mode filter string (applies equals to mode).
          required: false
          schema:
            type: string
            description: The submission mode.
            enum:
              - RUN
              - DIAGNOSE
              - SUBMIT
      responses:
        '200':
          description: Paged list of Submissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionsPage'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
    post:
      tags:
        - Submission
      summary: Execute and grade submission
      description: >-
        Executes and grades a submission. If <code>runInBackground</code> is
        <code>true</code>, only the submission identifier will be returned;
        otherwise the evaluation result will be returned. Requires the
        <code>SUBMIT</code> role.
      operationId: submitSolution
      parameters:
        - name: runInBackground
          in: query
          description: >-
            Whether to run the grading in background or wait for grading to
            finish.
          required: false
          schema:
            type: boolean
            default: false
        - name: persist
          in: query
          description: >-
            Whether to persist the submission. Only applies if
            <code>runInBackground</code> is <code>false</code>.
          required: false
          schema:
            type: boolean
            default: true
      requestBody:
        description: The submission data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '200':
          description: Submission graded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmissionResult'
        '202':
          description: Submission dispatched for grading
          headers:
            Location:
              description: The location of the submission result.
              schema:
                example: /api/submission/3fa85f64-5717-4562-b3fc-2c963f66afa6/result
                type: string
          content:
            text/plain:
              schema:
                description: The identifier of the submission.
                type: string
                format: uuid
        '400':
          description: Invalid submission data
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
      security:
        - api_key: [ ]
  /api/sumbission/{id}/result:
    get:
      tags:
        - Submission
      summary: Get evaluation result
      description: >-
        Returns the evaluation result for the requested submission. Waits for
        the specified timeout for the result to be available. Requires the
        <code>SUBMIT</code> role.
      operationId: getResult
      parameters:
        - name: id
          in: path
          description: The submission identifier.
          required: true
          schema:
            type: string
            format: uuid
        - name: X-API-TIMEOUT
          in: header
          description: The maximum amount of seconds to wait for the result.
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: delete
          in: query
          description: Whether to delete the submission after retrieval.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Evaluation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grading'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
        '404':
          description: Submission not found
        '408':
          description: Result is not yet available, try again later
  /actuator:
    get:
      tags:
        - Health
      summary: Provides available health endpoints
      description: >-
        Returns the available health endpoints. This is a <em>required</em>
        endpoint.
      operationId: links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  _links:
                    type: object
                    additionalProperties:
                      $ref: '#/components/schemas/Link'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
  /actuator/logfile:
    get:
      tags:
        - Health
      summary: Provide application logfile
      description: >-
        Returns the application logfile. Requires the <code>CRUD</code> role.
        This is an <em>optional</em> endpoint.
      operationId: logfile
      responses:
        '200':
          description: Log file contents
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
  /actuator/info:
    get:
      tags:
        - Health
      summary: Provide application information.
      description: >-
        Returns some information about the application. Requires the <code>CRUD</code> role.
        This is an <em>optional</em> endpoint.
      operationId: info
      responses:
        '200':
          description: Application build and runtime information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationInformation'
        '401':
          description: Unauthorized
        '403':
          description: Operation not allowed
  /actuator/health:
    get:
      tags:
        - Health
      summary: Provides application health information
      description: >-
        Returns the health information of the application. This is a
        <em>required</em> endpoint. If not authenticated, the server should only return
        the "status"-property. If authenticated, the server may also return health details
        of the components.
      operationId: health
      responses:
        '200':
          description: Application health
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthInformation'
components:
  schemas:
    TaskGroup:
      type: object
      description: >-
        The task group type specific data of a task group. The content of this
        object depends on the task group type.
      additionalProperties: true
      example:
        ddl: CREATE TABLE test (id INTEGER);
    ModifyTaskGroup:
      description: Data for creating and updating task groups.
      type: object
      required:
        - taskGroupType
        - additionalData
        - status
      properties:
        taskGroupType:
          type: string
          minLength: 2
          maxLength: 100
          description: >-
            The task group type. If a task app supports more than one task group
            type, this can be used to distinguish between types.
          example: sql
        status:
          type: string
          description: The task group status.
          enum:
            - DRAFT
            - READY_FOR_APPROVAL
            - APPROVED
        additionalData:
          type: object
          additionalProperties: true
          description: >-
            The task group type specific data. The content of this object
            depends on the task group type.
          example:
            ddl: CREATE TABLE test (id INTEGER);
    TaskGroupModificationResponse:
      description: Response data for creating and updating task groups. The task administration will use this value to set the task group description, if the user did not enter a description.
      type: object
      properties:
        descriptionDe:
          type: string
          description: The german task group description. May be <code>null</code> if generation of task group description is not supported.
          example: "Gesucht ist eine Zahl zwischen 1 und 10."
        descriptionEn:
          type: string
          description: The english task group description. May be <code>null</code> if generation of task group description is not supported.
          example: "We are looking for a number between 1 and 10."
    Task:
      type: object
      description: >-
        The task type specific data of a task. The content of this object
        depends on the task type.
      additionalProperties: true
      example:
        solution: SELECT id FROM student;
    ModifyTask:
      description: Data for creating and updating tasks
      type: object
      required:
        - additionalData
        - maxPoints
        - status
        - taskType
      properties:
        taskGroupId:
          type: integer
          description: The task group identifier, if applicable.
          format: int64
          example: 445
        maxPoints:
          type: number
          description: The maximum achievable points.
          example: 10.5
        taskType:
          maxLength: 100
          minLength: 2
          type: string
          description: >-
            The task type. If a task app supports more than one task type, this
            can be used to distinguish between types.
          example: sql
        status:
          type: string
          description: The task status.
          enum:
            - DRAFT
            - READY_FOR_APPROVAL
            - APPROVED
        additionalData:
          type: object
          additionalProperties: true
          description: >-
            The task type specific data. The content of this object depends on
            the task type.
          example:
            solution: SELECT id FROM student;
    TaskModificationResponse:
      description: Response data for creating and updating tasks.
      type: object
      properties:
        descriptionDe:
          type: string
          description: The german task description. May be <code>null</code> if generation of task description is not supported. The task administration will use this value to set the task description, if the user did not enter a description.
          example: "Geben Sie eine Zahl ein."
        descriptionEn:
          type: string
          description: The english task description. May be <code>null</code> if generation of task description is not supported. The task administration will use this value to set the task description, if the user did not enter a description.
          example: "Enter a number."
        difficulty:
          type: number
          format: int32
          description: The difficulty of the task. May be <code>null</code>. If a value is set, the task administration will override the user-specified difficulty with this value. Might be used by task apps to automatically set difficulty based on some metric.
          example: 2
          minimum: 0
          maximum: 3
        maxPoints:
          type: number
          description: The maximum points. May be <code>null</code>. If a value is set, the task administration will override the user-specified maximum points with this value. Might be used by task apps to automatically set maximum points based on some grading scheme.
          example: 25.75
          minimum: 0.01
    Submission:
      type: object
      description: Data for a submission that should be evaluated and graded
      required:
        - feedbackLevel
        - language
        - mode
        - submission
        - taskId
      properties:
        userId:
          maxLength: 255
          minLength: 0
          type: string
          description: The user identifier (can be used e.g. for plagiarism check).
          example: k12212345
        assignmentId:
          maxLength: 255
          minLength: 0
          type: string
          description: The assignment identifier (can be used e.g. for plagiarism check).
          example: moodle_quiz_3
        taskId:
          type: integer
          description: The task identifier.
          format: int64
          example: 8911
        language:
          maxLength: 2
          minLength: 2
          pattern: de|en
          type: string
          description: >-
            The user interface language. The feedback should be returned in the
            requested language.
        mode:
          type: string
          description: The submission mode. Might be expanded in future releases.
          enum:
            - RUN
            - DIAGNOSE
            - SUBMIT
        feedbackLevel:
          maximum: 3
          minimum: 0
          type: integer
          description: The feedback level.
          format: int32
        submission:
          description: The submission of the user. If the submission consists only of a string, then this object should contain a single property with the key <code>input</code> and the value of the submission as the property value. This ensures it can easily be tested in Task administration UI.
          type: object
          additionalProperties: true
          example:
            input: SELECT * FROM student;
    SubmissionResult:
      required:
        - grading
      type: object
      properties:
        submissionId:
          type: string
          description: The submission identifier.
          format: uuid
        grading:
          $ref: '#/components/schemas/Grading'
    Grading:
      required:
        - criteria
        - maxPoints
        - points
      type: object
      properties:
        maxPoints:
          type: number
          description: The maximum reachable points.
          example: 10.5
        points:
          type: number
          description: The achieved points.
          example: 7.5
        generalFeedback:
          type: string
          description: The general feedback (can be HTML).
          example: <p>Your solution is correct.</p>
        criteria:
          type: array
          description: The criteria containing the specific feedback.
          items:
            $ref: '#/components/schemas/Criterion'
      description: Grading and evaluation result of a submission
    Criterion:
      description: Criterion of a grading result
      required:
        - feedback
        - name
        - passed
      type: object
      properties:
        name:
          type: string
          description: The name of the criterion.
          example: Syntax
        points:
          type: number
          description: >-
            The achieved points (just for information, not used for total
            grading, might be <code>null</code>).
          example: 1.5
        passed:
          type: boolean
          description: >-
            Whether the criterion was passed (might influence display, not used
            for anything else).
        feedback:
          type: string
          description: The feedback for the criterion (can be HTML).
          example: <p>You are missing a semicolon at the end of your statement.</p>
    SubmissionsPage:
      description: Page of submission details
      type: object
      required:
        - totalElements
        - totalPages
        - size
        - number
        - numberOfElements
        - content
      properties:
        totalElements:
          type: integer
          format: int64
          description: The total amount of elements.
          example: 35
        totalPages:
          type: integer
          format: int32
          description: The total amount of pages.
          example: 4
        size:
          type: integer
          format: int32
          description: The size of the current page.
          example: 10
        number:
          type: integer
          format: int32
          description: The page number.
          example: 3
        numberOfElements:
          type: integer
          format: int32
          description: The number of elements in the current page.
          example: 5
        content:
          description: The submissions.
          type: array
          items:
            $ref: '#/components/schemas/SubmissionDetails'
    SubmissionDetails:
      description: Submitted, evaluated, graded and persisted submission
      type: object
      required:
        - feedbackLevel
        - id
        - language
        - mode
        - submission
        - submissionTime
        - taskId
      properties:
        id:
          type: string
          description: The submission identifier.
          format: uuid
        userId:
          maxLength: 255
          minLength: 0
          type: string
          description: The submission user identifier.
          example: k12212345
        assignmentId:
          maxLength: 255
          minLength: 0
          type: string
          description: The assignment identifier.
          example: moodle_quiz_3
        taskId:
          type: integer
          description: The task identifier.
          format: int64
          example: 7789
        submissionTime:
          type: string
          description: The submission timestamp.
          format: date-time
        language:
          maxLength: 2
          minLength: 2
          pattern: de|en
          type: string
          description: The user interface language.
        feedbackLevel:
          maximum: 3
          minimum: 0
          type: integer
          description: The requested feedback level.
          format: int32
        mode:
          type: string
          description: The submission mode.
          enum:
            - RUN
            - DIAGNOSE
            - SUBMIT
        evaluationResult:
          $ref: '#/components/schemas/Grading'
        submission:
          description: The task type specific submission data.
          type: object
          additionalProperties: true
          example:
            solution: SELECT * FROM student;
    ApplicationInformation:
      description: Information about the application
      type: object
      additionalProperties: true
      properties:
        git:
          type: object
          properties:
            dirty:
              description: Whether the git repository was dirty on build.
              type: boolean
            branch:
              description: The git branch.
              type: string
              example: main
            commit:
              description: The git commit hash.
              type: object
              properties:
                id:
                  description: The git commit hash.
                  type: object
                  properties:
                    abbrev:
                      description: The abbreviated commit hash.
                      type: string
                      example: 060b9f6
                    full:
                      description: The full commit hash.
                      type: string
                      example: 060b9f638044f8c1e46de002f5bc287beaecc56d
                time:
                  description: The commit time.
                  type: string
                  format: date-time
        build:
          description: The build information.
          type: object
          additionalProperties: true
          properties:
            version:
              description: The application version.
              type: string
              example: 1.1.0
            time:
              description: The build time.
              type: string
              format: date-time
            name:
              description: The application name.
              type: string
              example: eTutor Task-App
        os:
          type: object
          description: The operating system information.
          properties:
            name:
              description: The operating system name.
              type: string
              example: Linux
            version:
              description: The operating system version.
              type: string
              example: 6.6.16-linuxkit
            arch:
              description: The operating system architecture.
              type: string
              example: aarch64
    HealthInformation:
      type: object
      description: The health information of the application.
      required:
        - status
      properties:
        status:
          type: string
          description: The health status of the application.
          enum:
            - UP
            - DOWN
            - OUT_OF_SERVICE
            - UNKNOWN
        components:
          type: object
          description: The health details of the components. Only available if authenticated.
          additionalProperties:
            $ref: '#/components/schemas/HealthComponent'
    HealthComponent:
      type: object
      description: The health details of a component.
      required:
        - status
      properties:
        status:
          type: string
          description: The health status of the component.
          enum:
            - UP
            - DOWN
            - OUT_OF_SERVICE
            - UNKNOWN
        details:
          type: object
          description: The health details of the component.
          additionalProperties: true
        components:
          type: object
          description: The health details of the sub-components.
          additionalProperties:
            $ref: '#/components/schemas/HealthComponent'
    Link:
      type: object
      properties:
        href:
          description: The URL of the link.
          type: string
  securitySchemes:
    api_key:
      description: Authentication with API Key
      type: apiKey
      name: X-API-KEY
      in: header
