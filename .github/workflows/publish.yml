# Publishes the Maven Library and updates javadoc
name: Publish Library

# Run on merged pull request
on:
  pull_request:
    types:
      - closed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Publish Maven
  maven:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main' && startsWith(github.event.pull_request.title, 'chore(publish):')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Clean and Compile with maven
        run: mvn -B clean compile --file pom.xml

      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml

      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -DskipTests -s $GITHUB_WORKSPACE/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Split PR title
        env:
          MSG: ${{ github.event.pull_request.title }}
        id: split
        run: echo "VERSION=${MSG##*v}" >> "$GITHUB_OUTPUT"

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/*.jar
            pom.xml
          tag_name: "v${{ steps.split.outputs.VERSION }}"
          prerelease: ${{ contains(github.event.pull_request.title, '-') }}
          generate_release_notes: true
          draft: true
          fail_on_unmatched_files: false

  # Publish Javadoc
#  javadoc:
#    needs: maven
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Setup Pages
#        uses: actions/configure-pages@v4
#
#      - name: Set up JDK 21
#        uses: actions/setup-java@v3
#        with:
#          java-version: '21'
#          distribution: 'temurin'
#          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
#          settings-path: ${{ github.workspace }} # location for the settings.xml file
#
#      - name: Cache
#        uses: actions/cache@v3.3.2
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: |
#            ${{ runner.os }}-maven-
#
#      - name: Clean
#        run: mvn -B clean --file pom.xml
#
#      - name: Build javadoc
#        run: mvn -B javadoc:javadoc --file pom.xml
#
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v3
#        with:
#          path: './target/site/apidocs'
#
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4
